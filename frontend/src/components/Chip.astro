---
// export an enum for different variants of the chip
export const ChipVariants = {
    SELECTED: 'selected',
    COMING_SOON: 'coming-soon',
};

export const ChipSize = {
    SMALL: 'small',
    MEDIUM: 'medium',
    LARGE: 'large',
}

const { text, href, variant, size } = Astro.props;

let textString = text;
let classString;

switch (size) {
    case ChipSize.SMALL:
        classString = 'small';
        break;
    case ChipSize.MEDIUM:
        classString = 'medium';
        break;
    case ChipSize.LARGE:
        classString = 'large';
        break;
    default:
        classString = 'medium';
        break;
}
---

<span>
    { 
        variant === ChipVariants.SELECTED
            ?
        <a class={`selected ${classString}`} href={href}>{textString}</a>
            :
                (
                    variant === ChipVariants.COMING_SOON
                        ?
                    <a class={`blue ${classString}`} href={href}>{textString}</a>
                        :
                    <a class={`${classString}`} href={href}>{textString}</a>
                )
    }
</span>


<style>
	a {
        background-color: #007006;
		color: white;
		border-radius: 5px;
		text-decoration: none;
        padding: 5px;
        margin: 0px;
        margin-left: 4px;
        margin-right: 4px;
        display: inline-block;
        width: fit-content;
        opacity: 0.8;
        white-space: nowrap;
        -webkit-transition: 200ms linear;
        transition: 200ms linear;
	}

    a:hover {
        opacity: 1;
    }
    
	@media only screen and (max-width: 768px) {
		a {
            opacity: 1;
            font-size: 1.1em;
		}
	}

    .selected {
        background-color: #68d46d;
        color: black;
    }

    .blue {
        background-color: #9cbbe2;
        color: black;
    }

    .small {
        font-size: 0.8em;
        padding: 3px;
    }
</style>