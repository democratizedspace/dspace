---
import Page from '../../components/Page.astro';
import Chip from '../../components/Chip.astro';
import { durationInSeconds, SECOND, DEFAULT_COOLDOWN } from '../../utils.js';
import { getItemCount, prettyPrintNumber } from './utils';
import items from './json/items.json';

let itemsFiltered = items, itemsSorted, itemInfo = {};

const getItemCountById = (itemId) => {

    const itemCount = getItemCount(Astro.request, itemId);

    return itemCount;
};

for (let item of items) {
    let price = 0
    // get item.price in number and unit
    try {
        price = parseFloat(item.price.split(' ')[0]);   
    } catch (e) {
    }

    itemInfo[item.id] = {
        count: getItemCountById(item.id),
        cooldown: durationInSeconds(item.cooldown) * SECOND || DEFAULT_COOLDOWN,    
        price: price
    };
}

const filter = Astro.url.searchParams.get('search') || '';
const sortOrder = Astro.url.searchParams.get('sort') || 'az';

if (filter !== undefined && filter !== '') {
    itemsFiltered = items.filter((item) => {
        return item.name.toLowerCase().includes(filter.toLowerCase());
    });
}

switch (sortOrder) {
    case 'az':
        itemsSorted = itemsFiltered.sort((a,b)=>a.name.localeCompare(b.name));
        break;
    case 'za':
        itemsSorted = itemsFiltered.sort((a,b)=>b.name.localeCompare(a.name));
        break;
    case 'countdescending':
        itemsSorted = itemsFiltered.sort((a,b)=>itemInfo[b.id].count - itemInfo[a.id].count);
        break;
    case 'countascending':
        itemsSorted = itemsFiltered.sort((a,b)=>itemInfo[a.id].count - itemInfo[b.id].count);
        break;
    case 'cooldownascending':
        itemsSorted = itemsFiltered.sort((a,b)=>itemInfo[a.id].cooldown - itemInfo[b.id].cooldown);
        break;
    case 'cooldowndescending':
        itemsSorted = itemsFiltered.sort((a,b)=>itemInfo[b.id].cooldown - itemInfo[a.id].cooldown);
        break;
    case 'priceascending':
        itemsSorted = itemsFiltered.sort((a,b)=>(itemInfo[a.id].price || 0) - (itemInfo[b.id].price || 0));
        break;
    default:
        itemsSorted = itemsFiltered.sort((a,b)=>(itemInfo[b.id].price || 0) - (itemInfo[a.id].price || 0));
        break;
} 
---

<Page title="Inventory" columns="1">
    <nav>
        <Chip text="a-z" href={`/inventory?sort=az`} />
        <Chip text="z-a" href={`/inventory?sort=za`} />
        <Chip text="count ↑" href={`/inventory?sort=countascending`} />
        <Chip text="count ↓" href={`/inventory?sort=countdescending`} />
        <Chip text="price ↑" href={`/inventory?sort=priceascending`} />
        <Chip text="price ↓" href={`/inventory?sort=pricedescending`} />
    </nav>

    <div class="container">
        <!-- for each item, create a card that shows the image, title, description, and count in a mobile friendly way -->
        {itemsSorted.map((item) => {
            return (
                <a href={`/inventory/item/${item.id}`}>
                    <div class="card">
                        <div class="vertical">
                            <img src={item.image} alt={item.name} />
                            <h5>{item.name}</h5>
                            <p>Count: {prettyPrintNumber({number: itemInfo[item.id].count})}</p>
                            <p>Price: {item.price ? item.price : "Soulbound"}</p>
                        </div>
                    </div>
                </a>
            );
        })}
    </div>
</Page>

<style>
	nav {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        justify-items: center;
        grid-row-gap: 10px;
        grid-column-gap: 0px;
	}

    .container {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: auto 1fr;
    }

    a {
        text-decoration: none;
        color: white;
    }

    .card {
        background-color: #2f5b2f;
        margin: 5px;
        padding: 5px;
        border-radius: 20px;
        transition: 0.5s;
    }

    /* mobile .card */
    @media only screen and (max-width: 768px) {
        .container {
            grid-template-columns: 1fr;
        }
    }

    .card:hover {
        background-color: #3f6b3f;
    }

    img {
        width: 50px;
        height: 50px;
        border-radius: 20px;
        margin-top: 5px;
    }

    .vertical {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .horizontal {
        display: flex;
        flex-direction: row;
        align-items: center;
        text-align: center;
    }

    h5 {
        margin: 10px;
    }

    p {
        margin: 0px;
    }
</style>
