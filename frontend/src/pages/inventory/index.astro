---
import Page from '../../components/Page.astro';
import Chip from '../../components/Chip.astro';
import { getItemCount, durationInSeconds, prettyPrintDuration, SECOND, DEFAULT_COOLDOWN } from '../../utils.js';
import items from './json/items.json';

let itemsFiltered = items, itemsSorted, itemInfo = {};

const getItemCountById = (itemId) => {

    const itemCount = getItemCount(Astro.request, itemId);

    return itemCount;
};

for (let item of items) {
    let price = 0
    // get item.price in number and unit
    try {
        price = parseInt(item.price.split(' ')[0]);   
    } catch (e) {
    }

    itemInfo[item.id] = {
        count: getItemCountById(item.id),
        cooldown: durationInSeconds(item.cooldown) * SECOND || DEFAULT_COOLDOWN,    
        price: price
    };
}

const filter = Astro.url.searchParams.get('search') || '';
const sortOrder = Astro.url.searchParams.get('sort') || 'az';

if (filter !== undefined && filter !== '') {
    itemsFiltered = items.filter((item) => {
        return item.name.toLowerCase().includes(filter.toLowerCase());
    });
}

switch (sortOrder) {
    case 'az':
        itemsSorted = itemsFiltered.sort((a,b)=>a.name.localeCompare(b.name));
        break;
    case 'za':
        itemsSorted = itemsFiltered.sort((a,b)=>b.name.localeCompare(a.name));
        break;
    case 'countdescending':
        itemsSorted = itemsFiltered.sort((a,b)=>itemInfo[b.id].count - itemInfo[a.id].count);
        break;
    case 'countascending':
        itemsSorted = itemsFiltered.sort((a,b)=>itemInfo[a.id].count - itemInfo[b.id].count);
        break;
    case 'cooldownascending':
        itemsSorted = itemsFiltered.sort((a,b)=>itemInfo[a.id].cooldown - itemInfo[b.id].cooldown);
        break;
    case 'cooldowndescending':
        itemsSorted = itemsFiltered.sort((a,b)=>itemInfo[b.id].cooldown - itemInfo[a.id].cooldown);
        break;
    case 'priceascending':
        itemsSorted = itemsFiltered.sort((a,b)=>(itemInfo[a.id].price || 0) - (itemInfo[b.id].price || 0));
        break;
    default:
        itemsSorted = itemsFiltered.sort((a,b)=>(itemInfo[b.id].price || 0) - (itemInfo[a.id].price || 0));
        break;
} 
---

<Page title="Inventory" columns="1">
    <nav>
        <Chip text="a-z" href={`/inventory?sort=az`} />
        <Chip text="z-a" href={`/inventory?sort=za`} />
        <Chip text="highest count" href={`/inventory?sort=countdescending`} />
        <Chip text="lowest count" href={`/inventory?sort=countascending`} />
        <Chip text="least expensive" href={`/inventory?sort=priceascending`} />
        <Chip text="most expensive" href={`/inventory?sort=pricedescending`} />
    </nav>

    {itemsFiltered.map((item) => (
        <a href={`/inventory/${item.id}`}>
            <div class="item">
                <h3>{item.name}</h3>
                <div class="parent">
                    <img src={item.image} />
                    <p class="nobackground description">{item.description}</p>
                    <div class="parent vertical">
                        <p class="compact nowrap"><strong>Count:</strong> {getItemCountById(item.id)}</p>
                        <p class="compact nowrap"><strong>Price:</strong> {item.price || 'Soulbound'}</p>
                    </div>
                </div>
            </div>
        </a>
    ))}
</Page>

<style>

    .parent {
        display: flex;
        align-items: center;
    }

    .vertical {
        flex-direction: column;
    }

    .item {
        background-color: #2f5b2f;
        padding: 20px;
        border-radius: 20px;
        opacity: 0.8;
    }

    .item:hover {
        opacity: 1;
    }

    .item h3 {
        margin: 0px;
        text-align: center;
    }

    img {
        width: 100px;
        height: 100px;
        border-radius: 20px;
        margin-right: 5px;
    }

    a {
        text-decoration: none;
        color: white;
        width: 100%;
    }

    p {
        background-color: #84d484;
        opacity: 0.8;
        color: black;
        padding: 5px;
        margin: 5px;
        border-radius: 20px;
    }

    .compact {
        font-size: 0.8em;
        margin: 2px;
        padding: 5px;
    }

    .nowrap {
        margin-right: 5px;
        white-space: nowrap;
    }

    .nobackground {
        background: none;
        color: white;
    }

	nav {
		text-align: center;
		display: flex;
		flex-wrap: wrap;
	}

    nav :global() {
        margin: 10px;
    }

    .description {
        width: 295px;
    }

    @media only screen and (max-width: 768px) {
		img {
            width: 50px;
            height: 50px;
        }

        .description {
            min-width: 100px;
            width: auto;
        }
	}
</style>
